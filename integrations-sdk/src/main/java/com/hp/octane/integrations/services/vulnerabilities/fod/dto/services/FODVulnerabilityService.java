/*
 *     Copyright 2017 EntIT Software LLC, a Micro Focus company, L.P.
 *     Licensed under the Apache License, Version 2.0 (the "License");
 *     you may not use this file except in compliance with the License.
 *     You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *     Unless required by applicable law or agreed to in writing, software
 *     distributed under the License is distributed on an "AS IS" BASIS,
 *     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *     See the License for the specific language governing permissions and
 *     limitations under the License.
 */

package com.hp.octane.integrations.services.vulnerabilities.fod.dto.services;


import com.hp.octane.integrations.services.vulnerabilities.fod.dto.FodConnectionFactory;
import com.hp.octane.integrations.services.vulnerabilities.fod.dto.pojos.Vulnerability;
import com.hp.octane.integrations.services.vulnerabilities.fod.dto.pojos.VulnerabilityAllData;
import com.hp.octane.integrations.utils.CIPluginSDKUtils;

import java.util.List;

/**
 * Created by hijaziy on 8/3/2017.
 */
public class FODVulnerabilityService {
    ///api/v3/releases/{releaseId}/vulnerabilities

    static final String urlSingleVulnAllData = "%s/releases/%d/vulnerabilities/%s/all-data";


    public static List<Vulnerability> getAllVulnerabilities(Long releaseId){
        final String urlVulnsFormat = "%s/releases/%d/vulnerabilities";


        String url = String.format(urlVulnsFormat, FodConnectionFactory.instance().getEntitiesURL(), releaseId);

        url +=  "?filters=" + CIPluginSDKUtils.urlEncodeQueryParam("status:Existing|New");

//        if(scanId != null){
//            url = url + "?filters=scanId%3A" + scanId;
//        }

        Vulnerability.Vulnerabilities allFODEntities =
                FodConnectionFactory.instance().getAllFODEntities(url, Vulnerability.Vulnerabilities.class, null );


        return allFODEntities.items;

    }

    public static VulnerabilityAllData getSingleVulnAlldata(Long releaseId, String vulnId){

        String url = String.format(urlSingleVulnAllData,
                FodConnectionFactory.instance().getEntitiesURL(), releaseId, vulnId);

        VulnerabilityAllData vulnerabilityAllData =
                FodConnectionFactory.instance().getSpeceficFODEntity(url, VulnerabilityAllData.class);

        return vulnerabilityAllData;
    }

}
